// Code generated by protoc-gen-mcpserver. DO NOT EDIT.
package example

import (
	"context"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

type ExampleServiceMcpServer interface {
	GreetPerson(ctx context.Context, req *GreetPersonRequest) (*GreetPersonResponse, error)
	CalculateSum(ctx context.Context, req *CalculateSumRequest) (*CalculateSumResponse, error)
	CheckStatus(ctx context.Context, req *CheckStatusRequest) (*CheckStatusResponse, error)
	ProcessNames(ctx context.Context, req *ProcessNamesRequest) (*ProcessNamesResponse, error)
	ComplexOperation(ctx context.Context, req *ComplexOperationRequest) (*ComplexOperationResponse, error)
}

func RegisterExampleServiceMcpServer(s *server.MCPServer, srv ExampleServiceMcpServer) {
	s.AddTool(
		mcp.NewTool(
			"GreetPerson",
			mcp.WithDescription("GreetPerson description"),
			mcp.WithToolAnnotation(mcp.ToolAnnotation{
				Title: "GreetPerson",
			}),
			mcp.WithString("FirstName", mcp.Description("Parameter FirstName")),
			mcp.WithString("LastName", mcp.Description("Parameter LastName")),
		),
		func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			req := &GreetPersonRequest{}
			req.FirstName = mcp.ParseString(request, "FirstName", "")
			req.LastName = mcp.ParseString(request, "LastName", "")

			res, err := srv.GreetPerson(ctx, req)
			if err != nil {
				return nil, err
			}

			result := &mcp.CallToolResult{
				Result:  mcp.Result{},
				Content: []mcp.Content{},
				IsError: false,
			}
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("Greeting: "+res.Greeting))

			return result, nil
		},
	)
	s.AddTool(
		mcp.NewTool(
			"CalculateSum",
			mcp.WithDescription("CalculateSum description"),
			mcp.WithToolAnnotation(mcp.ToolAnnotation{
				Title: "CalculateSum",
			}),
			mcp.WithNumber("Number1", mcp.Description("Parameter Number1")),
			mcp.WithNumber("Number2", mcp.Description("Parameter Number2")),
			mcp.WithNumber("Factor", mcp.Description("Parameter Factor")),
		),
		func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			req := &CalculateSumRequest{}
			req.Number1 = mcp.ParseInt32(request, "Number1", 0)
			req.Number2 = mcp.ParseInt32(request, "Number2", 0)
			req.Factor = mcp.ParseFloat64(request, "Factor", 0)

			res, err := srv.CalculateSum(ctx, req)
			if err != nil {
				return nil, err
			}

			result := &mcp.CallToolResult{
				Result:  mcp.Result{},
				Content: []mcp.Content{},
				IsError: false,
			}
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("Sum: "+fmt.Sprintf("%v", res.Sum)))
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("Product: "+fmt.Sprintf("%v", res.Product)))

			return result, nil
		},
	)
	s.AddTool(
		mcp.NewTool(
			"CheckStatus",
			mcp.WithDescription("CheckStatus description"),
			mcp.WithToolAnnotation(mcp.ToolAnnotation{
				Title: "CheckStatus",
			}),
			mcp.WithBoolean("IsActive", mcp.Description("Parameter IsActive")),
			mcp.WithBoolean("SendNotification", mcp.Description("Parameter SendNotification")),
		),
		func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			req := &CheckStatusRequest{}
			req.IsActive = mcp.ParseBoolean(request, "IsActive", false)
			req.SendNotification = mcp.ParseBoolean(request, "SendNotification", false)

			res, err := srv.CheckStatus(ctx, req)
			if err != nil {
				return nil, err
			}

			result := &mcp.CallToolResult{
				Result:  mcp.Result{},
				Content: []mcp.Content{},
				IsError: false,
			}
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("Success: "+fmt.Sprintf("%v", res.Success)))
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("Message: "+res.Message))

			return result, nil
		},
	)
	s.AddTool(
		mcp.NewTool(
			"ProcessNames",
			mcp.WithDescription("ProcessNames description"),
			mcp.WithToolAnnotation(mcp.ToolAnnotation{
				Title: "ProcessNames",
			}),
			mcp.WithArray("Names", mcp.Description("Parameter Names")),
			mcp.WithArray("Counts", mcp.Description("Parameter Counts")),
		),
		func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			req := &ProcessNamesRequest{}
			// Handle repeated field Names
			if arr, ok := request.Params.Arguments["Names"]; ok && arr != nil {
				if arrValue, ok := arr.([]interface{}); ok {
					for _, v := range arrValue {
						if strVal, ok := v.(string); ok {
							req.Names = append(req.Names, strVal)
						}
					}
				}
			}
			// Handle repeated field Counts
			if arr, ok := request.Params.Arguments["Counts"]; ok && arr != nil {
				if arrValue, ok := arr.([]interface{}); ok {
					for _, v := range arrValue {
						if numVal, ok := v.(float64); ok { // JSON numbers are float64
							req.Counts = append(req.Counts, int32(numVal))
						}
					}
				}
			}

			res, err := srv.ProcessNames(ctx, req)
			if err != nil {
				return nil, err
			}

			result := &mcp.CallToolResult{
				Result:  mcp.Result{},
				Content: []mcp.Content{},
				IsError: false,
			}
			// Format repeated field
			if len(res.ProcessedNames) > 0 {
				arrayStr := "["
				for i, v := range res.ProcessedNames {
					if i > 0 {
						arrayStr += ", "
					}
					arrayStr += fmt.Sprintf("%q", v)
				}
				arrayStr += "]"
				result.Content = append(result.Content, mcp.NewTextContent("ProcessedNames: "+arrayStr))
			} else {
				result.Content = append(result.Content, mcp.NewTextContent("ProcessedNames: []"))
			}
			// Format repeated field
			if len(res.ProcessedCounts) > 0 {
				arrayStr := "["
				for i, v := range res.ProcessedCounts {
					if i > 0 {
						arrayStr += ", "
					}
					arrayStr += fmt.Sprintf("%v", v)
				}
				arrayStr += "]"
				result.Content = append(result.Content, mcp.NewTextContent("ProcessedCounts: "+arrayStr))
			} else {
				result.Content = append(result.Content, mcp.NewTextContent("ProcessedCounts: []"))
			}
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("Summary: "+res.Summary))

			return result, nil
		},
	)
	s.AddTool(
		mcp.NewTool(
			"ComplexOperation",
			mcp.WithDescription("ComplexOperation description"),
			mcp.WithToolAnnotation(mcp.ToolAnnotation{
				Title: "ComplexOperation",
			}),
			mcp.WithString("OperationName", mcp.Description("Parameter OperationName")),
			mcp.WithBoolean("IsPriority", mcp.Description("Parameter IsPriority")),
			mcp.WithArray("Tags", mcp.Description("Parameter Tags")),
			mcp.WithNumber("Timeout", mcp.Description("Parameter Timeout")),
			mcp.WithArray("Values", mcp.Description("Parameter Values")),
		),
		func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			req := &ComplexOperationRequest{}
			req.OperationName = mcp.ParseString(request, "OperationName", "")
			req.IsPriority = mcp.ParseBoolean(request, "IsPriority", false)
			// Handle repeated field Tags
			if arr, ok := request.Params.Arguments["Tags"]; ok && arr != nil {
				if arrValue, ok := arr.([]interface{}); ok {
					for _, v := range arrValue {
						if strVal, ok := v.(string); ok {
							req.Tags = append(req.Tags, strVal)
						}
					}
				}
			}
			req.Timeout = mcp.ParseInt32(request, "Timeout", 0)
			// Handle repeated field Values
			if arr, ok := request.Params.Arguments["Values"]; ok && arr != nil {
				if arrValue, ok := arr.([]interface{}); ok {
					for _, v := range arrValue {
						if numVal, ok := v.(float64); ok {
							req.Values = append(req.Values, float64(numVal))
						}
					}
				}
			}

			res, err := srv.ComplexOperation(ctx, req)
			if err != nil {
				return nil, err
			}

			result := &mcp.CallToolResult{
				Result:  mcp.Result{},
				Content: []mcp.Content{},
				IsError: false,
			}
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("Success: "+fmt.Sprintf("%v", res.Success)))
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("OperationId: "+res.OperationId))
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("StatusCode: "+fmt.Sprintf("%v", res.StatusCode)))
			// Format repeated field
			if len(res.Results) > 0 {
				arrayStr := "["
				for i, v := range res.Results {
					if i > 0 {
						arrayStr += ", "
					}
					arrayStr += fmt.Sprintf("%q", v)
				}
				arrayStr += "]"
				result.Content = append(result.Content, mcp.NewTextContent("Results: "+arrayStr))
			} else {
				result.Content = append(result.Content, mcp.NewTextContent("Results: []"))
			}
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("Average: "+fmt.Sprintf("%v", res.Average)))

			return result, nil
		},
	)
}

type MyToolsMcpServer interface {
	Tool1(ctx context.Context, req *Tool1Request) (*Tool1Response, error)
	Tool2(ctx context.Context, req *Tool2Request) (*Tool2Response, error)
	Tool3(ctx context.Context, req *Tool3Request) (*Tool3Response, error)
}

func RegisterMyToolsMcpServer(s *server.MCPServer, srv MyToolsMcpServer) {
	s.AddTool(
		mcp.NewTool(
			"Tool1",
			mcp.WithDescription("Tool1 description"),
			mcp.WithToolAnnotation(mcp.ToolAnnotation{
				Title: "Tool1",
			}),
			mcp.WithString("Firstname", mcp.Description("Parameter Firstname")),
			mcp.WithString("Lastname", mcp.Description("Parameter Lastname")),
		),
		func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			req := &Tool1Request{}
			req.Firstname = mcp.ParseString(request, "Firstname", "")
			req.Lastname = mcp.ParseString(request, "Lastname", "")

			res, err := srv.Tool1(ctx, req)
			if err != nil {
				return nil, err
			}

			result := &mcp.CallToolResult{
				Result:  mcp.Result{},
				Content: []mcp.Content{},
				IsError: false,
			}
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("Fullname: "+res.Fullname))

			return result, nil
		},
	)
	s.AddTool(
		mcp.NewTool(
			"Tool2",
			mcp.WithDescription("Tool2 description"),
			mcp.WithToolAnnotation(mcp.ToolAnnotation{
				Title: "Tool2",
			}),
			mcp.WithString("Name", mcp.Description("Parameter Name")),
		),
		func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			req := &Tool2Request{}
			req.Name = mcp.ParseString(request, "Name", "")

			res, err := srv.Tool2(ctx, req)
			if err != nil {
				return nil, err
			}

			result := &mcp.CallToolResult{
				Result:  mcp.Result{},
				Content: []mcp.Content{},
				IsError: false,
			}
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("Result: "+res.Result))

			return result, nil
		},
	)
	s.AddTool(
		mcp.NewTool(
			"Tool3",
			mcp.WithDescription("Tool3 description"),
			mcp.WithToolAnnotation(mcp.ToolAnnotation{
				Title: "Tool3",
			}),
			mcp.WithString("WallaceFavoriteFood", mcp.Description("Parameter WallaceFavoriteFood")),
		),
		func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
			req := &Tool3Request{}
			req.WallaceFavoriteFood = mcp.ParseString(request, "WallaceFavoriteFood", "")

			res, err := srv.Tool3(ctx, req)
			if err != nil {
				return nil, err
			}

			result := &mcp.CallToolResult{
				Result:  mcp.Result{},
				Content: []mcp.Content{},
				IsError: false,
			}
			// Format non-repeated field
			result.Content = append(result.Content, mcp.NewTextContent("HisFavoriteFood: "+res.HisFavoriteFood))

			return result, nil
		},
	)
}

func ServeStdio(
	name,
	version string,
	srvExampleService ExampleServiceMcpServer,
	srvMyTools MyToolsMcpServer,
) error {
	s := server.NewMCPServer(name, version,
		server.WithToolCapabilities(true),
		server.WithLogging(),
	)
	RegisterExampleServiceMcpServer(s, srvExampleService)
	RegisterMyToolsMcpServer(s, srvMyTools)
	return server.ServeStdio(s)
}
